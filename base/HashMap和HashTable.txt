HashMap
		如何实现不重复对象存储?
				-->数组+单链表

					int hash = hash(key);
			        int i = indexFor(hash, table.length);
			        for (Entry<K,V> e = table[i]; e != null; e = e.next) {
			        //只要for循环执行一次,说明,bucketIndex冲突了,这个地方存在entry对象
			            Object k;
			            if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {
			            //第一个==是判断要存入对象的key和已有对象的key的hash是否相同,如果不同,说明需要在已有对象的位置处再加入一个entry对象,形成单链表结构
			            //如果相同,再去判断他们的key是否equals,相同表示可以相同了,需要覆盖它的value
			                V oldValue = e.value;
			                e.value = value;
			                e.recordAccess(this);
			                return oldValue;
			            }
			        }

			        //说明不存在key值相同的对象
			        modCount++;
			II      addEntry(hash, key, value, i);
			        return null;

			II      void addEntry(int hash, K key, V value, int bucketIndex) {
				        if ((size >= threshold) && (null != table[bucketIndex])) {
				        //这段话表示扩容,直接扩容一倍
				            resize(2 * table.length);
				            hash = (null != key) ? hash(key) : 0;
				            bucketIndex = indexFor(hash, table.length);
				        }
			III	        createEntry(hash, key, value, bucketIndex);
			    	}

			    	//这个方法无论如何都要执行
		    III	    void createEntry(int hash, K key, V value, int bucketIndex) {
				        Entry<K,V> e = table[bucketIndex];
				        //表示无论bucketIndex这个位置是否有对象A,null或者对象A都会放入新创建的对象的next属性中(next是entry<key,value>对象)
				        table[bucketIndex] = new Entry<>(hash, key, value, e);
				        size++;
				    }

		单链表如何实现?
				-->就是对象中去引用另一个对象(相当于拥有了另一个对象的地址)

		什么条件下重写equals()和hashCode()?
				-->如果key是自定义对象,就必须重写该对象的equals()和hashCode()方法
				-->源码中会去比较key.equals(otherKey),只有重写equals()才能实现key值不冲突

		key可以为空吗?
				-->可以,但是只能有一个key为空,该对象存放在table[0]中.


		get方法如何实现?
				-->每次执行get方法,先根据int hash = hash(key);indexfor(hash,table.length)找到对应的数组角标后去取对象
				-->再遍历该对象中的next属性对象,知道找到相应的Object对象.并返回相应的value值

		HashMap是否可以实现同步?
				第一种:
						-->在jdk1.5之后,新增了Collections.synchronizeMap(hashMap);
				第二种:
						-->直接使用ConcurrentHashMap();

HashTable
		key可以为null吗?
				-->不可以,直接报异常  
				if (value == null) {
		            throw new NullPointerException();
		        }
		是否安全?
				-->public synchronized V put(K key, V value){}
				-->安全的,方法synchronized后,上了锁,一次只能一个线程去执行该方法

		速度相比于HashMap就慢了



HashSet
		-->底层的几乎所有方法是调用HashMap
		-->set中存储的对象就是key
		-->为此必须重写hashcode()和equals()

		-->重写hashCode(),是因为生成hash值时,调用了key的hashcode(),生成的hashcode值进行位运算,从而生成hash值

		为什么要对对象重写hashcode()?
				-->咱们说对象相等是里面的属性是相等的,就根据属性值生成hashcode值,这样所有相同属性的对象的hashcode就一样
				-->对象相同和hashcode相同

		重写了hashcode还不能保证HashMap底层能够存储不同的key值,怎么操作呢?
				-->重写equals(),相同的hashcode后(概率很小,但是还是可能出现),之后就利用单链表存储相同hashcode的对象
				-->当下一个对象存储时,就去循环比较单链表中对象,这个比较的方法中会用到key对象的equals()方法,
				-->这个equals()方法也是由对象中的属性去比较
				-->最终才能保证hashset只能存储不同的对象

				