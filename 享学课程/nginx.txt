重启
	nginx -s reload
停止
	nginx -s stop
检查文件格式
	nginx -t
以配置文件启动
	nginx -c /etc/nginx/nginx.conf)(默认也是这个)


nginx总结性的东东
	event
	http
	 server
	  location
		 root
		 alias
		 index
		 rewrite
		 	空				会往下继续rewrite,如果没有了,会引发location重新匹配
		 	last			不会继续往下执行,而是会引发location重新匹配,很有可能引发循环,少用
		 	break			不会继续往下执行,也不会引发重定向,到这里就结束了
		 	redirect		页面重定向,浏览器网址会变化,但是浏览器没有记录,只是一次重定向
		 	permanent		永久重定向,是对浏览器有记忆作用,每次去调用,浏览器直接修改你的url,然后再来调用


location中   
	= 						首先匹配=,再次匹配^~,=是精准匹配(一模一样才能命中),^~是以这个为开头,匹配到就可以
	^~ 						以什么开头匹配,区分大小写
	~ 						区分大小写匹配
	~* 						不区分大小写匹配
	/						最后是通用性的,只要有/就可以被匹配,但是优先级是最低,其他匹配完了才能开始作用



nginx中的正则符号的作用
	
	^						以什么开始
	$						以什么结尾
	*						表示任意
	

跨域出现的原因
	第二次请求的ajax与第一次请求的页面的域名不一致,浏览器不允许

	解决方法:
		前端header携带origin:static.enjoy.com
		nginx获取header中的origin信息,判断只要是enjoy.com的一级域名,就在返回header中添加字段access-control-allow-origin static.enjoy.com

		upstream						负载均衡配置的分发ip
		server							虚拟地址							
	  		location   						uri映射,分发
	  			proxy_pass						如果proxy_pass后面的ip+port带了/,location上的映射到的path就不带上,如果没有/,就带上location上的映射到的path,带向分发
				root							声明静态文件目录,不是命令,location匹配的path,会被带到内容生成端
				alias							别名,location匹配的path,不会被带到内容生成端,别名只是加上匹配的path的后面部分
				index							
					1.只看uri的结尾是否是/结尾,如果是就表示目录,index才会起作用,如果不是/结尾,就表示是文件,index就不起作用
					2.(uri=匹配到的path1+为匹配到的path2,会将配置的  /目录地址/ + path1 + path2,如果找不到文件,就直接找index配置的默认文件)
				rewrite							uri替换,格式: rewrite regex replacement [flag]    flag = {什么都没有,last,break,redirect,permanent}
					什么都没有						不会去匹配location,只是匹配下一个rewrite
					last							会去匹配其它location下的rewrite,是因为location和rewrite的last作用,导致需要去重新匹配其它location的rewrite
					break							会打断后续匹配
					redirect						重定向
					permanent						永久重定向

				^/:表示总是匹配
