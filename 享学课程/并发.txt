cpu核心数:线程数= 1:1
cpu核心数:线程数= 1:2(超线程)

并行量:同一时间能够运行的数量
并发量:一段时间内,运行的量

线程:cpu调度执行的最小单位
进程:程序运行分配资源的最小单位

为什么使用并发编程?
	提高cpu的利用率,减少用户等待时间,程序模块化(不同业务,同时没有先后顺序,同时执行几个代码段),异步化

并发编程带来的问题?
	资源是否安全,内存溢出,死锁



多线程实现的方式
	继承Thread:
		
	实现Runnable
		new Thread(Thread继承类).start()
	实现Callable
		有返回值,但是启动方式不是直接用 new Thread(Thread类),而是用new FutureTask(Thread类).start()


