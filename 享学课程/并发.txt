cpu核心数:线程数= 1:1
cpu核心数:线程数= 1:2(超线程)

并行量:同一时间能够运行的数量
并发量:一段时间内,运行的量

线程:cpu调度执行的最小单位
进程:程序运行分配资源的最小单位

为什么使用并发编程?
	提高cpu的利用率,减少用户等待时间,程序模块化(不同业务,同时没有先后顺序,同时执行几个代码段),异步化

并发编程带来的问题?
	资源是否安全,内存溢出,死锁



多线程实现的方式
	继承Thread:
		
	实现Runnable
		new Thread(Thread继承类).start()
	实现Callable
		有返回值,但是启动方式不是直接用 new Thread(Thread类),而是用new Thread(new FutureTask(Thread类)).start()



AQS:
	AbstractQueuedSynchronizer


并发包中继承了该类的类
	ReentrantLock:
		Sync
		NonfairSync
		FairSync

	ReentrantReadWriteLock
		Sync
		NonfairSync
		FairSync
		ReadLock
		WriteLock

	Semaphore
		Sync
		NonfairSync
		FairSync

	CountDownLatch
		Sync

	ThreadPoolExcuteExecutor



这些都是继承了AQS抽象类
	


在Java中可以概括的锁分类以下几类
	共享锁和排它锁
	公平锁和非公平锁
	可重入锁和非重入锁
	乐观锁和悲观锁

Java的内置的锁:
	synchronized
		排它锁,可重入锁
			优点:使用简单
			缺点:暂用资源非常多,如果一个线程锁的不释放,那么其他锁永远也得不到锁,非常浪费资源,用户交互上,不能够及时响应

并发包提供的锁:
	
	Lock锁:
		共享锁和排他锁都有实现,也可重入
			底层原理:
				cas
				队列(双向链表)
				LockSupport的支持

			优点:可重入,获取锁可被中断,超时获取锁,可以尝试获取锁,可以读写分离锁


与并发相关的类
	CyclicBarrier
	CountDownLatch
	Semaphore
	LockSupport
	Exchange
	Callable/Future/FutrueTask

	ReentrantLock
	ReentrantReadWriteLock

与并发相关的概念
	Fork/Join:分而治之,分成几份,但是每一份都和原来具有同样的意义,然后将结果结合,用到了多线程技术,多线程同时运算

Thread类方法
	join()
	yield()
	sleep()
	setDamon()
	isDamon()
	start()
	run()
	interrupt()
	isInterrupted()


Object类方法
	wait()
	notify()
	notifyAll()


这是都是单体应用中可以使用的,但是如果在分布式中,对于数据库的某张表有多个入口操作(集群的方式),此时这一类锁就没有作用


分布式锁:
	1.redis的setNX()
	2.基于zookeeper的实现*-------


取模:
	345%16 == 345&(n^4-1)

位运算会用来做
	1.某种属性的是否存在
	2.方便存储,位运算更加快

volatile的作用:
	就是任何线程改了值之后,会立即通知线程去内存拿到最新被修改的值 如果不是的话 从cpu的缓存或者线程自己的copy的一份里面拿就会出现数据不一致




    /**
     * Thread方法
     *
     * Object方法
     *
     * Fork/Join
     *
     * cas
     *
     * CountDownLatch
     * CyclicBarrier
     * Exchange
     * Semaphore
     *
     * LockSupport
     *
     * ReentrantLock
     * ReentrantReadWriteLock
     *
     * 继承至AbstractQueuedSynchronizer
     *      ReentrantLock
     *          根据AQS父类的state状态(由cas保证对state的操作是原子性,可重入进入就加1,释放就减一)来判断是否可以获取锁
     *          排它锁
     *              当一个线程占用了,其它线程不可能能够占用
     *          默认非公平锁
     *              就是直接先获取锁,如果获取到锁就直接返回,如果没有获取到锁就调用acquire(1)去获取,进去后判断当前锁是否空闲,空闲情况下compareAndSetState(0,1),如果成功就返回
     *              如果失败还要判断是否是重入类型的(也就是是否还是同一个线程),如果是state本来=1,然后在加1或者加acquires.如果在tryAcquire(1)中无法获取到锁,就会直接进入队列中阻塞等待了
     *                  总结就是:
     *                      直接获取锁(compareAndSwapInt)不行,再尝试tryAcquire(里面包含再次去获取锁,验证是否是重入锁,放入队列中等待自旋,一直等待到获取到锁为止.
     *          公平锁
     *              会直接判断目前这个线程是否就是线程的头和是否是重入锁类型,如果是获取到锁(我们说的获取到锁就是将state=0置为1,或者state=1置为2,就看到底是否是可重入锁)
     *              如果不是,就会直接进入队列中阻塞等待了(最后一步是与非公平锁的最后一步是一致的)
     *          compareAndSwapInt
     *          compareAndSetInt
     *              这些底层方法是jvm底层c或者c++实现的cas原子操作
     *
     *      ReentrantReadWriteLock
     *          读锁
     *              先尝试去直接去获取锁(tryAcquireShared中的compareAndSetState),然后实在不行就调用doAcquireShared的addWaiter(先加入共享类型的Node队列链表中),再次等待获取锁(阻塞)直到获取到锁为止
     *          写锁
     *
     *
     *      CountDownLatch
     *          记录多个或者一个线程到达countDown()方式为止时,new CountDownLatch(count)中的count-1,减为0时,就可以在await()的地方继续执行下去
     *          也是使用了共享锁,放入队列链表中.
     *
     *      CyclicBarrier
     *          当所有的线程到达await时,才能够继续await后面的代码段
     *
     *      Semaphore
     *           默认使用的是非公平锁
     *           用途:
     *              用于限制访问某个资源的线程数量,只能同时最多有10个人(如果你设置成10的话)获取到线程,其它人在等待队列中等待,当其中有人释放了,等待队列中的就会去抢,默认是非公平的锁,就是有新的线程直接去获取锁
     *              这里用到了等待通知范式,当有其它线程执行完后,唤醒其它所有线程去抢锁
     *
     *      ThreadLocalExecutor
     *
     * AQS的原理
     *      队列(双向链表)
     *          等待队列是双向链表,如果存在Condition对象,会在Condition类中也建立一个双向链表,每个Condition拥有自己的一个锁
     *      最底层是cas
     *          V A  B
     *          V地址的值与A值相同时,就把B值赋值给V地址
     *          ABA问题:
     *              A->B->A时,cas是无法判定错误的,为了解决这个ABA问题,AtomicStampedReference来解决ABA问题
     *      LockSupport
     *
     *
     * ConcurrentHashMap
     *      1.7:segment加锁
     *          table数组,放单项链表的表头
     *          get方式是弱一致性,在获取的过程中是没有加锁的,很有可能
     *          size方法也是弱一致性(获取前两次不加锁,不一致才要加锁获取)
     *          自动扩容:0.75的扩容因子,扩容2倍
     *          内部的Segment对象就是一个锁,继承至ReentrantLock
     *
     *      1.8:还未看源码
     *
     * 锁类型
     *      公平锁
     *          公平锁用的很少,因为效率更低,自旋让其他线程一直等待,可能某个线程很快及执行完 但是必须要一直等待
     *      非公平锁
     *          在新线程进来时都会去尝试去获取锁,获取不到再被放入队列中等待
     *      可重入锁
     *          当某一个线程多次进入加锁的位置,可重入就叫可重入锁,实现的原理就是state值一直递增,释放的时候递减,减为0就表示出来,
     *          都是cas保证state的数据安全,也会被volatile修饰来保证某个线程修改了后,其它线程能够马上看到最新的值,从而忽略缓存带来的延迟,保证安全就必须牺牲时间
     *      非重入锁
     *
     *      乐观锁
     *      悲观锁
     *      共享锁
     *          也就是ReentrantReadWriteLock的读锁,如果是加了读锁的,进入一次就递增,出去了就减一次,如果现在有写线程进来,这时读写都会被堵塞,这种非常适合读多写少的情况下
     *      独占锁
     *          也就是ReentrantReadWriteLock的写锁,写锁被占用其他线程是能获取到的,其他线程就进入队列中
     *
     * 分布式锁
     *      redis的setNX,能解决并发不高情况,很有可能在某个线程执行长时间时都还没有执行完就释放锁了 导致线程安全问题
     *
     *
     *
     *
     *
     *
     *
     */