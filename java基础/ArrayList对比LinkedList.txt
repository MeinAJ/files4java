ArrayList
		-->快在于查询,定位索引非常快
		-->慢在于copy,数据移动非常耗时

LinkedList
		-->快在于数据移动非常快
		-->慢在于查询,定位到需要的索引


LinkedList可能存在的误区(相对于ArrayList)
		-->删除快,插入快(相对)
				-->如果可以保证经常需要增加或者删除的数据在索引的前半部分,使用LinkedList相对会快一些.
				-->如果经常需要删除和插入的数据在后半段,ArrayList的增删速度就会相当或者更胜一筹,
				因为LinkedList底层前后维护的Entry占用较多,内存消耗较多,也会一定程度的降低速度


情况一
		-->做项目时不太确定经常需要删除或者增加在哪个位置,LinkedList消耗时间比较稳定均衡,没有ArrayList插入较前面数据,消耗不太稳定



总结
		-->经常需要增加数据,ArrayList一般放在最后,速度也挺快,LinkedList已非常快
				-->经常增加数据  两种都ok

		-->经常删除数据,删除数据可能具有不确定性,LinkedList就会更胜一筹

		-->经常需要遍历数据所有数据,ArrayList的for循环和foreach效率差不多,LinkedList的foreach效率和ArrayList差不多,但是for循环LinkedList效率极低,尽量使用增强for循环

		-->如果经常需要获取某一个值,使用LinkedList数据更好

		--可以根据实际情况,把不同类型数据放在不同的List实现类中,最求更高效率