SpringMVC实现过程:
1.浏览器发送url,被web.xml中DispatcherServlet(DS)拦截
2.DS将url请求交给HandlerMapper
3.HandlerMapper解析url,对比注解@RequestMapping的地址
4.HandlerMapper分配相应的Handler对象和拦截器形成HandlerExecutionChain,返回给DS
5.DS将HandlerExecutionChain交给HandlerAdapter,DS中的默认的三个HandlerAdapter去比较这个Handler
6.三个HandlerAdapter中的一个去执行handle()方法,返回ModelAndView对象给DS
7.DS将ModelAndView对象交给ViewResolver
InternalResourceViewResolver(视图解析器)和UrlBasedViewResolver去解析并拼接逻辑视图名成物理视图名
8.返回View对象给DS,DS利用Model中的map数据结构渲染View
9.最后由DS返回响应给浏览器


1.DispatcherServlet对象可以看作是整合SpringMVC的核心控制器,
	1.1初始化SpringMVC容器就是调动HandlerMapping对象去解析注解与后续需要被执行方法的对应关系
	1.2调动HandlerAdapter对象,url找到对应的Handler对象后去找适应的适配器叫他去反射或者动态代理实现该方法
	1.3又叫ViewResolver对象,去解析ModelAndView对象,解析成物理视图
	1.4调动View对象,把model对象中的数据放入request对象中,并将request中的数据放入视图(jsp或者pdf等等)就渲染成功.
	1.5并把请求返回回浏览器

...................................................................................................................................................................

2.3.4:
HandlerMapper解析url中字符串,并在一个map对象中查找是否有对应的key(字符串),如果有就将该Handler对象(可以看成是一个@Controller声明类中的方法)封装成几个拦截器和Handler对象的HandlerExecutionChain对象返回给DS

<context:component-scan base-package="com.aj.springmvc.controller"/>扫描将Controller对象放入spring容器中
注册:
如果web.xml中配置了服务器启动就创建DispatcherServlet,那么服务器启动时就去初始化SpringMVC容器
如果没有配置,那么就在浏览器访问的时候才创建Servlet对象
在注册前,会将key:扫描@RequestMapping中的值看成key,Controller类的方法名称或者可以获取方法的东西作为value,存入urlMap,然后再调用registerHandler(url, handler)
url="/user" value=handler的名称等等(一个类名?),最后根据value的值就是handlerName值,去容器中取对象,getApplicationContext().getBean(handlerName),最后将url的值和取得对象放入(this.handlerMap.put(urlPath, resolvedHandler))handlerMap属性中.

查找:
请求来时,通过HTTPServletRequest对象中可以获取url字符串,执行doService(),该方法中又去执行doDispatcher(),该方法中又去调用HandlerMapping,url就在该对象中去比对初始化时的handlerMapper属性,找到对应的Handler对象和拦截器的封装类HandlerExecutionChain (HandlerExecutionChain handler = hm.getHandler(request);)
这个getHandler(request)方法在AbstractHandlerMapping重写,在这个方法中会再调用getHandlerExecutionChain(),返回真正的HandlerExecutionChain的对象.

在请求来时,HandlerMapping解析url成一个字符串,去handlerMap属性集合中查找是否有相同的key(String类型),就找到对应的Handler对象,找到了这个Handler对象后,
又将几个拦截器和该Handler对象封装成一个HandlerExecutionChain对象,返回给DS

然后DispatcherServlet调动8执行的doDispatch

...................................................................................................................................................................

5.6.默认的三个Adapter:

SimpleControllerHandlerAdapter-->controller继承了Controller接口的实现类
每个Adapter内部有方法support(Object handler),判断这个Handler是否适合这个Adapter

    public boolean supports(Object handler) {  
        return (handler instanceof Controller);  
    }  
    上面这段代码是SimpleControllerHandlerAdapter的判断方法


HttpRequestHandlerAdapter-->继承或者是HttpRequestHandler接口的实现类

	public boolean supports(Object handler) {
		return (handler instanceof HttpRequestHandler);
	}
	上面这段代码就表示只要是HttpRequestHandler的实现类适配



AnnotationMethodHandlerAdapter
	public boolean supports(Object handler) {
		return getMethodResolver(handler).hasHandlerMethods();
	}
	上面这段代码表示Handler对象是否在存在于?这段不是很清晰
	这个Adapter,在目前已近不是很常用

现在最新的RequestMappingHandlerAdapter去实现Handler(就是controller层的方法的形参的绑定和方法的实现)
private ModelAndView invokeHandleMethod(HttpServletRequest request,HttpServletResponse response, HandlerMethod handlerMethod)
去执行这个Handler方法,

		WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);
		ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);
		ServletInvocableHandlerMethod requestMappingMethod = createRequestMappingMethod(handlerMethod, binderFactory);
		ModelAndViewContainer mavContainer = new ModelAndViewContainer();
		mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));
		modelFactory.initModel(webRequest, mavContainer, requestMappingMethod);
		mavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);
就是去将各种数据绑定在Model对象中



private ServletInvocableHandlerMethod createRequestMappingMethod(
			HandlerMethod handlerMethod, WebDataBinderFactory binderFactory) {
获取需要执行执行的方法,并把形参的对象传递给该方法,


requestMappingMethod.invokeAndHandle(webRequest, mavContainer);
再去执行这个方法,执行这个方法后,会将model中的数据放在mavenContainer对象中,mavenContainer全局对象就把数据传递给ModelAndView对象
执行这个方法时,会判断这个方法的返回值是String或者void或者ModelAndView对象,并把这个返回值对象一一对应放入mavContainer容器中,方法执行完就将mavContainer对象返回

return getModelAndView(mavContainer, modelFactory, webRequest);

最后将mavContainer,model对象,webRequest中包含request数据返回给DS


...................................................................................................................................................................


7.8.9.

DisPatcherServlet调用initViewResolvers(ApplicationContext context)方法初始化ViewResolver对象在集合中
下面是伪代码
private void initViewResolvers(ApplicationContext context) {  
        this.viewResolvers = null;  
        if (this.detectAllViewResolvers) {  
			....
        }  
        else {  
            try {  
                ViewResolver vr = context.getBean(VIEW_RESOLVER_BEAN_NAME, ViewResolver.class);//从IOC容器里面的viewResolver相关对象并存储  
                this.viewResolvers = Collections.singletonList(vr);  
            }  
            catch (NoSuchBeanDefinitionException ex) {  
                // Ignore, we'll add a default ViewResolver later.  
            }  
        }  
  
        // Ensure we have at least one ViewResolver, by registering  
        // a default ViewResolver if no other resolvers are found.  
        if (this.viewResolvers == null) {  
            this.viewResolvers = getDefaultStrategies(context, ViewResolver.class);  
            if (logger.isDebugEnabled()) {  
                logger.debug("No ViewResolvers found in servlet '" + getServletName() + "': using default");  
            }  
        }  
    }  

上面代码意思是:
如果在ioc容器中未发现任何的ViewResolver对象,就使用默认的ViewResolver对象放入集合对象中


DS调用适配器对象去调用handle方法前,执行代码1.

			1.	if (!mappedHandler.applyPreHandle(processedRequest, response)) {
					return;
				}

			会去先执行拦截器的preHandle(),比如你自己创建的一个拦截器,用于用户校验,那么当执行了preHandle之后,返回false,那么条件为真,就不会再执行视图解析器的后续工作

				// Actually invoke the handler.
			2.	mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
			此时适配器调用handle对象读取执行请求的方法,并返回ModelAndView对象
			
			3.processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);
		视图解析的方法

			4.	mappedHandler.applyPostHandle(processedRequest, response, mv);
			只要1.执行了就会去执行该方法.

			5.最后执行handle的completeHandle方法


视图解析是在3.步骤执行
	processDispatchResult()方法中回去调用下面的代码:

	if (mv != null && !mv.wasCleared()) {
			render(mv, request, response);
			if (errorView) {
				WebUtils.clearErrorRequestAttributes(request);
			}
	}

此段代码的render方法中有两段代码很重要是核心

第一段代码:

	view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);------>根据逻辑视图名获取到物理视图地址
	protected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,HttpServletRequest request) throws Exception {  
  
	    for (ViewResolver viewResolver : this.viewResolvers) {  
	        View view = viewResolver.resolveViewName(viewName, locale);  ------>从ViewResolver对象中找到视图对象
	        if (view != null) {  
	            return view;  
	        }  
	    }  

	    return null;  
	} 
	执行顺序,往下是方法中的方法执行
	1.
		viewResolver.resolveViewName(viewName, locale)-->
	2.
		View resolveViewName(String viewName, Locale locale)-->
	3.
		View createView(viewName, locale),先判断是否有缓存视图如果没有就去创建,有就直接去取出就行 没有就执行该方法--->
	4.	
		View loadView(viewName, locale);该方法是AbstractCachingViewResolver的子类UrlBasedViewResolver方法
	5.	
		这段代码是核心 
		AbstractUrlBasedView view = buildView(viewName);
		这段代码中实现了getPrefix() + viewName + getSuffix();---->逻辑视图编程物理视图地址
		执行完buildView后,就返回一个View对象


第二段代码:
	
	第一段代码得到的View对象,最后就去进行渲染处理,如下所示:

	view.render(mv.getModelInternal(), request, response)----->View对象对Model进行渲染后将视图展示给用户

	render(mv.getModelInternal(), request, response)--->

	这个方法中renderMergedOutputModel(mergedModel, request, response)有两段代码很重要
	1.
		一段是exposeForwardRequestAttributes(requestToExpose);
		(该方法中有一段代码是request.setAttribute(modelName, modelValue); 循环遍历出数据放入request对象中)就是将model中的数据放入request中

	2.
		另外一段代码是rd.forward(requestToExpose, response);(就是最核心的功能了,就是将响应返回给用户)


 	InternalResourceView继承了AbstractUrlBasedView，InternalResourceView的主要作用就是拿到视图的路径，创建一个RequestDispatcher对象。将视图路径给RequestDispatcher，RequestDispatcher条用forward方法，将视图展示给用户。