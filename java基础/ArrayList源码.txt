ArrayList是什么?

数组		
		-->有序			
		-->查询快/删除慢

可变数组	
		-->原则上无限容量
		-->比数组灵活

扩容规则	
		-->当前容量的一半(size/2)	
		-->扩展为(size*1.5)

每次扩容带来的缺点
		-->每次扩容都会新建一个数组为原来的1.5倍	
		-->将原来的数据移动到新的数组这样将非常耗时

		解决方法
				-->如果能够大致估算ArrayList所需要多少数据量,在创建构造函数时就填写一个适当的数字
				-->设置的数字不应过大,过大会造成内存的浪费

如何保证自动扩容
		-->每一次添加数据进去的时候,都会执行此ensureCapacityInternal(size + 1),去判断当前数据长度+1是否会大于数组长度,如果长度大于了Integer-8就扩容为Integer长度,但是这样往往会内存溢出

		-->扩容后才将对象插入数组中

jvm的最大int[]数组长度
		-->根据jvm是32位还是64位,会有所不同
		-->32:2^30-2
		-->64:2^31-1
		-->不同的jvm版本,大小也有所不同

删除和插入中间索引的缺点
		-->非常浪费资源,没删除一次或者插入一项,都会移动后面的索引的数据往前移动一格


void trimToSize()作用
		-->为了减少内存消耗,如果数据长度为30,但是数组长度为40,就会浪费10的长度
		-->如果数据比较大时,不易使用该方法,过大,下次增加一个数据时,就会扩大0.5倍,这样就比较耗费资源
		-->内存不够的时候经常用到


删除对象
		-->remove(Index index)		-->删除后,后面索引的数据集体往前移动一格,非常耗时
		-->remove(Object o)			-->索引0开始遍历数组,直到查找到对应数据,删除数据

		对比:remove(Object o) 		-->更耗时,多了查询数据一步